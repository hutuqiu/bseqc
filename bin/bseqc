#!/usr/bin/env python
# coding=utf-8

'''
Description:  Quality Control of bisulfite sequencing experiments (BSeQC)

Input:  the standard SAM files
Output: the bias-free SAM files

Support:
bsqc module:
1. Use Mbias plot to measure the BS-specific biases (eg: overhang end-repaired qc_assess; 5 prime non-conversion qc_assess)
   and sequence related biases (eg: sequence into adaptor; low-quality nucleotide call).
2. Trim the biases based on the M-qc_assess plot automatically
3. Remove the duplicate reads resulting from possible over-amplification
4. Keep only one copy of the overlapping segment of two read mates in paired-end seq

nonuniformqc module:
1. Use the strategy in Bis-SNP to trim 5' bisulfite conversion failures
   (For each read, we walk along the read from 5' to 3', and we remove any Cs on the C-strand until we reach the first reference C which is converted to a T)
2. Remove the duplicate reads resulting from possible over-amplification
3. Keep only one copy of the overlapping segment of two read mates in paired-end seq

rrbs module:
1. Use restriction enzyme digestion sites(C-CGG) to remove end-repaired bias
2. Keep only one copy of the overlapping segment of two read mates in paired-end seq


This code is free software; you can redistribute it and/or modify it
under the terms of the BSD License (see the file COPYING included with
the distribution).




@author: Xueqiu Lin
@contact: xueqiu.lin@gmail.com
'''

# ------------------------------------
# python modules
# ------------------------------------
import sys
import logging
import argparse as ap

# ------------------------------------
#logging object
# ------------------------------------



logging.basicConfig(level=20,
                    format=' %(levelname)-5s @ %(asctime)s: %(message)s ',
                    datefmt='%a, %d %b %Y %H:%M:%S',
                    stream=sys.stderr,
                    filemode="w"
)
info = logging.info
error = logging.error
warning = logging.warning


def main():
    """The Main function for BSeQC.
    """
    # Parse options
    argparser = prepare_argparser()
    args = argparser.parse_args()
    subcommnad = args.subcommand_name
    if subcommnad == "mbias":
        from BSeQC.mbias import run
        run(argparser)

    elif subcommnad == "nonuniform":
        from BSeQC.nonuniform import run
        run(argparser)

    elif subcommnad == "rrbs":
        from BSeQC.rrbs import run
        run(argparser)


def prepare_argparser():
    """
    Prepare optparser object. New options will be added in this
    function first.

    """
    description = "%(prog)s -- Bisulfite Sequencing Experiment Quality Control"
    epilog = "For command line options of each command, type: %(prog)s COMMAND -h"

    # top-level parser
    argparser = ap.ArgumentParser(description=description, epilog=epilog)
    BSeQC_VERSION = "1.0.3"
    argparser.add_argument("--version", action="version", version="%(prog)s " + BSeQC_VERSION)
    subparsers = argparser.add_subparsers(dest='subcommand_name')

    # command for 'mbias'
    add_mbias_parser(subparsers)

    # command for 'nonuniform'
    add_nonuniform_parser(subparsers)

    # command for 'rrbs'
    add_rrbs_parser(subparsers)

    return argparser


def add_mbias_parser(subparsers):
    """
    Add main module 'mbias' argument parsers.
    :param subparsers:
    """
    argparser_mbias = subparsers.add_parser("mbias",
                                            help="Main BSeQC Function: Use Mbias plot to make trimming decision")
    argparser_mbias.add_argument("-s", "--sam", dest="sam_file", type=str, required=True,
                                 help="The SAM file for quality analysis; Multiple SAM file should be separated by the ','. (required)")
    argparser_mbias.add_argument("-r", "--ref", dest="ref_file", type=str, required=True,
                                 help="The reference genome fasta file. (required)")
    argparser_mbias.add_argument("--bsmooth_merman", dest="bsm", action="store_true", default=False,
                                 help="If the mapping SAM/BAM files are generated by BSmooth merman alignment algorithm, please set it on. Default = False")
    argparser_mbias.add_argument("-n", "--name", type=str, dest="name", default="NA",
                                 help="The name for the output plot and table (required). Default='NA'")
    argparser_mbias.add_argument("-t", "--samtools", dest="samtools", metavar="PATH", default="",
                                 help="The path of samtools. Default=""")
    argparser_mbias.add_argument("-l", "--len", type=str, dest="read_length", default="",
                                 help="If the original mapping reads have been trimmed with adapter or other reasons, the original read length for the sam file should be set."
                                      "Multiple length can also be separated by ','. If the read length of two mates in paired-end is different, please separated by '_' ")
    argparser_mbias.add_argument("-p", "--pvalue", type=float, dest="pvalue", default=0.01,
                                 help="The pvalue will be set for the trimming cutoff. Default = 0.01")
    argparser_mbias.add_argument("--drift", type=int, dest="drift", default=2,
                                 help="How many drifts(the methylation level percentage) will be set for the trimming cutoff, Default = 2")
    argparser_mbias.add_argument("-f", "--trim_file", type=str, dest="trim_file", default="",
                                 help="User can determine the trimming bp by the qc_filter file. Default=""")
    argparser_mbias.add_argument("-a", "--auto", dest="automatically", action="store_false", default=True,
                                 help="Automatically qc_filter the biased bp. If not you can use the Mcall biases plot to manually decide how many bp to qc_filter and a trimming file. Default = True.")
    argparser_mbias.add_argument("-o", "--remove_overlap", dest="remove_overlap", action='store_false', default=True,
                                 help="Keep only one copy of the overlapping segment of two read mates in paired-end seq. Default = True.")
    argparser_mbias.add_argument("--filter_dup", dest="filter_dup", action="store_false", default=True,
                                 help="Remove duplicate reads resulting from possible over-amplification. Default = True.")
    argparser_mbias.add_argument("--p_poisson", type=float, dest="p_poisson", default=1e-5,
                                 help="Pvalue cutoff Poisson distribution test in removing duplicate reads. Default = 1e-5. "
                                      "It is restricted by --filter_dup.")
    argparser_mbias.add_argument("-g", "--gsize", type=str, dest="gsize", default="hs",
                                 help="Effective genome size for calculate max coverage. It can be 1.0e7 or 10000000, "
                                      "or shortcuts: 'hs' for human (2.7e9), 'mm' for mouse (1.87e9), 'ce' for C. elegans (9e7) and 'dm' for fruitfly (1.2e8). Default:hs"
                                      "It is restricted by --filter_dup.")
    argparser_mbias.add_argument("--not_mapping", dest="not_mapping", action="store_false", default=True,
                                 help="Whether keep the not-unique mapping reads in the filter SAM file. Default = True")
    return


def add_nonuniform_parser(subparsers):
    """
    Add function 'nonuniform': use nonuniform strategy (suggested in Bis-SNP) to trim 5 bisulfite conversion failures
    """
    argparser_nonuniform = subparsers.add_parser("nonuniform",
                                                 help="Alternative Function: Use nonuniform strategy (suggested in Bis-SNP) to trim 5' bisulfite conversion failure")
    argparser_nonuniform.add_argument("-s", "--sam", dest="sam_file", type=str, required=True,
                                      help="The SAM file for quality analysis; Multiple SAM file should be separated by the ','. (required)")
    argparser_nonuniform.add_argument("-r", "--ref", dest="ref_file", type=str, required=True,
                                      help="The reference genome fasta file. (required)")
    argparser_nonuniform.add_argument("--bsmooth_merman", dest="bsm", action="store_true", default=False,
                                 help="If the mapping SAM/BAM files are generated by BSmooth merman alignment algorithm, please set it on. Default = False")
    argparser_nonuniform.add_argument("-n", "--name", type=str, dest="name", default="NA",
                                      help="The name for the output plot and table (required). Default='NA'")
    argparser_nonuniform.add_argument("-t", "--samtools", dest="samtools", metavar="PATH", default="",
                                      help="The path of samtools. Default=""")
    argparser_nonuniform.add_argument("-o", "--remove_overlap", dest="remove_overlap", action='store_false',
                                      default=True,
                                      help="Keep only one copy of the overlapping segment of two read mates in paired-end seq. Default = True.")
    argparser_nonuniform.add_argument("--filter_dup", dest="filter_dup", action="store_false", default=True,
                                      help="Remove duplicate reads resulting from possible over-amplification. Default = True.")
    argparser_nonuniform.add_argument("--p_poisson", type=float, dest="p_poisson", default=1e-5,
                                      help="Pvalue cutoff Poisson distribution test in removing duplicate reads. Default = 1e-5. "
                                           "It is restricted by --filter_dup.")
    argparser_nonuniform.add_argument("-g", "--gsize", type=str, dest="gsize", default="hs",
                                      help="Effective genome size for calculate max coverage. It can be 1.0e7 or 10000000, "
                                           "or shortcuts: 'hs' for human (2.7e9), 'mm' for mouse (1.87e9), 'ce' for C. elegans (9e7) and 'dm' for fruitfly (1.2e8). Default:hs"
                                           "It is restricted by --filter_dup.")
    argparser_nonuniform.add_argument("--not_mapping", dest="not_mapping", action="store_false", default=True,
                                      help="Whether keep the not-unique mapping reads in the filter SAM file. Default = True")
    return


def add_rrbs_parser(subparsers):
    """
    Add function: 'RRBS QC mode'
    """
    argparser_rrbs = subparsers.add_parser("rrbs",
                                           help = "Alternative Function: RRBS QC mode")
    argparser_rrbs.add_argument("-s", "--sam", dest="sam_file", type=str, required=True,
                                 help="The SAM file for quality analysis; Multiple SAM file should be separated by the ','. (required)")
    argparser_rrbs.add_argument("-r", "--ref", dest="ref_file", type=str, required=True,
                                 help="The reference genome fasta file. (required)")
    argparser_rrbs.add_argument("--bsmooth_merman", dest="bsm", action="store_true", default=False,
                                 help="If the mapping SAM/BAM files are generated by BSmooth merman alignment algorithm, please set it on. Default = False")
    argparser_rrbs.add_argument("-n", "--name", type=str, dest="name", default="NA",
                                 help="The name for the output plot and table (required). Default='NA'")
    argparser_rrbs.add_argument("-t", "--samtools", dest="samtools", metavar="PATH", default="",
                                 help="The path of samtools. Default=""")
    argparser_rrbs.add_argument("-D", dest="dige_site", type=str, default="C-CGG",
                                help="set restriction enzyme digestion sites. digestion position marked by '-', example: -D C-CGG for MspI digestion. Default = C-CGG.")
    argparser_rrbs.add_argument("-o", "--remove_overlap", dest="remove_overlap", action='store_false', default=True,
                                 help="Keep only one copy of the overlapping segment of two read mates in paired-end seq. Default = True.")
    argparser_rrbs.add_argument("--not_mapping", dest="not_mapping", action="store_false", default=True,
                                 help="Whether keep the not-unique mapping reads in the filter SAM file. Default = True")
    return

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupt me! ;-) See you!\n")
